// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}




model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
  // Custom relations
  preference     Preference?
  scripts        Script[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Preference {
  id             String   @id @default(cuid())
  userId         String   @unique
  genres         String[] // e.g., ["thriller", "comedy"]
  tones          String[] // e.g., ["dramatic", "sarcastic"]
  styles         String[] // e.g., ["cinematic", "narrative"]
  referenceWorks String[] // e.g., ["Quentin Tarantino", "Wes Anderson"]

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // e.g., "movie", "stage play", "web series"
  content     Json     // Structured template data (could include formatting guidelines)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scripts     Script[]
}

model Script {
  id         String           @id @default(cuid())
  userId     String
  title      String
  templateId String?          // Optional association with a Template
  content    String           // The current version of the script (could be raw text or structured JSON)
  status     String           // e.g., "draft", "published"
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template?        @relation(fields: [templateId], references: [id])
  revisions  ScriptRevision[]
}

model ScriptRevision {
  id             String    @id @default(cuid())
  scriptId       String
  revisionNumber Int
  content        String
  createdAt      DateTime  @default(now())
  
  script         Script    @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, revisionNumber])
}
